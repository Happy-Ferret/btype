# This is a library to make it easier to work with strings. As strings in BType
# are idempotent, you should expect each function to return a new string
# instance.

func str:rot13(str:input) {
    if input.length == 0 {
        return input;
    }

    var orig = input as array<uint>;
    var stage = new array<uint>(input.length);
    int:i = 0;
    uint:char = 0 as uint;
    for i = 0; i < input.length; i = i + 1; {
        char = orig[i];
        if char > (64 as uint) and char < (91 as uint) {
            char = ((90 as uint) - (char - (65 as uint)));
        } else if char > (96 as uint) and char < (123 as uint) {
            char = ((122 as uint) - (char - (95 as uint)));
        }
        stage[i] = char;
    }
    return stage as str;
}
export rot13;
