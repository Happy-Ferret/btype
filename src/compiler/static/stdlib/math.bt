import foreign;


func float:abs(float:i) {
    if i < 0.0 {
        return i * -1.0;
    } else {
        return i;
    }
}
export abs;

func int:iabs(int:i) {
    return foreign.Math.abs(i);
}
export iabs;

func int:ceil(float:i) {
    return foreign.Math.ceil(i);
}
export ceil;

func int:floor(float:i) {
    return foreign.Math.floor(i);
}
export floor;


# Float functions

func float:exp(float:i) {
    return foreign.Math.exp(i);
}
export exp;

func float:log(float:i) {
    return foreign.Math.log(i);
}
export log;

func float:logN(float:b, float:n) {
    return foreign.Math.log(n) / foreign.Math.log(b);
}
export logN;

func float:sqrt(float:i) {
    return foreign.Math.sqrt(i);
}
export sqrt;

func float:pow(float:y, float:x) {
    return foreign.Math.pow(y, x);
}
export pow;


# Constants
const CONST_PI = 3.141592653589793;
const CONST_E = 2.718281828459045;
const CONST_LN10 = 2.302585092994046;
const CONST_LN2 = 0.6931471805599453;
const CONST_LN10E = 0.4342944819032518;
const CONST_LN2E = 1.4426950408889634;
const CONST_SQRT1_2 = 0.7071067811865476;
const CONST_SQRT2 = 1.4142135623730951;

func float:PI() { return CONST_PI; }
export PI;
func float:E() { return CONST_E; }
export E;
func float:LN10() { return CONST_LN10; }
export LN10;
func float:LN2() { return CONST_LN2; }
export LN2;
func float:LN10E() { return CONST_LN10E; }
export LN10E;
func float:LN2E() { return CONST_LN2E; }
export LN2E;
func float:SQRT1_2() { return CONST_SQRT1_2; }
export SQRT1_2;
func float:SQRT2() { return CONST_SQRT2; }
export SQRT2;


func float:min(float:x, float:y) {
    if y < x { return y; }
    return x;
}
export min;
func float:max(float:x, float:y) {
    if y > x { return y; }
    return x;
}
export max;
func float:bound(float:i, float:min, float:max) {
    if i < min { return min; }
    if i > max { return max; }
    return i;
}
export bound;

func int:imin(int:x, int:y) {
    if y < x { return y; }
    return x;
}
export imin;
func int:imax(int:x, int:y) {
    if y > x { return y; }
    return x;
}
export imax;
func int:ibound(int:i, int:min, int:max) {
    if i < min { return min; }
    if i > max { return max; }
    return i;
}
export ibound;


func float:NaN() {
    return foreign.external.getNaN.float();
}
export NaN;
